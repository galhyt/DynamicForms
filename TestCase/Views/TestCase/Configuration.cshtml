@model TestCase.Models.TestCaseConfigModel
@using System.Text.RegularExpressions;
@using DynamicForms;
@using TestCase.Models;

@{
    Layout = null;
}

<html>
    <head>
    </head>
    <body>
        @Html.HiddenFor(m=>m.DataCreteria)
        @Html.HiddenFor(m=>m.FormDataParentPath)
        @Html.HiddenFor(m=>m.FormDataPath)
        @{List<SelectListItem> subCategories = new List<SelectListItem>();
            if (Model.FormCategory != null && Model.FormCategory != "" && TestCaseConfigModel.FormsHeirarchy.ContainsKey(Model.FormCategory))
            {
                subCategories = TestCaseConfigModel.FormsHeirarchy[Model.FormCategory].Select(x => new SelectListItem { Text = x, Value = x }).ToList();
            }
        }
        <div style="overflow: auto;">
            <div>
                Category: @Html.DropDownListFor(m=>m.FormCategory, TestCaseConfigModel.FormsHeirarchy.Keys.Select(x=> new SelectListItem{Text=x, Value=x}), "- Select Category -")
                Sub Category: @Html.DropDownListFor(m=>m.FormSubCategory, subCategories, "- Select Sub Category -")
                @Html.HiddenFor(m=>m.DataCreteria)
            </div>
            <div class="DynamicFormContainer">
            </div>
            <div class="BtnContain" >
                <input type="submit"  id="SaveDynamicForm" value="Save" />
                <input type="button" class="CancelBtn" value="Cancel" />
                <span style="float:right" class="status-label"></span>
            </div>
        </div>
        <script type="text/javascript">
            @{var Content = Newtonsoft.Json.JsonConvert.SerializeObject(TestCaseConfigModel.FormsHeirarchy);
                Content = Content.Replace(@"""", @"\""");}
            var FormsHeirarchy = $.parseJSON("@Html.Raw(Content)");
            $(document).ready(function () {
                $('.status-label').show().fadeOut(5000);
                $('#FormCategory').change(function () {
                    $('#FormSubCategory option').not(':first-of-type').remove();
                    FormsHeirarchy[$(this).find('option:selected').val()].forEach(function (subCat, indx) {
                        $('#FormSubCategory').append(String.format('<option value="{0}">{0}</option>', [subCat]));
                    });
                });

                $('#FormSubCategory').change(function () {
                    var FormPath = $('#FormCategory').find('option:selected').val() + "." + $(this).find('option:selected').val();
                    document.location.href = document.location.href.replace(/\?FormPath=[\w\W]*(?=\&|$)|$/, "?FormPath=" + FormPath);
                });

                $('#SaveDynamicForm').click(function () {
                    var data = {
                        Form: TemplateDynamicFormConfiguration.configurationToJson(),
                        FormCategory:$('#FormCategory').val(),
                        FormSubCategory:$('#FormSubCategory').val(),
                        FormDataParentPath: $('#FormDataParentPath').val(),
                        FormDataPath:$('#FormDataPath').val(),
                        FormPath: $('#FormPath').val()
                    };

                    $.ajax({
                        url: '/TestCase/ConfigurationAjax',
                        method: 'POST',
                        dataType: "json",
                        contextType: "application/json",
                        traditional: true,
                        data: { model: JSON.stringify(data) },
                        cache: false,
                        success: function (data) {
                            $('.status-label').fadeOut(5000).text(data.responseText);
                        },
                        error: function (data) {
                            $('.status-label').fadeOut(5000).text(data.responseText);
                        }
                    });
                });
            });
        </script>
    </body>
</html>